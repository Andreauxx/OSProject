<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnUser.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAABLAAAAKjCAYAAAANs/bAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAACTkAAAk5AV3dsycAABNMSURBVHhe7d1rjFxlGQfwN6hQMIAE5JqINVBCYwwRtBG5
        Y0DFBmjBhltCMEVpCphoosIHlzMtpVyK1IKhUHqRXmgLlC2YeEk0kvjFePtgIkYN0ahRE0KQ3dnZbvcx
        p0mxfd9p2Zld6M7290v+yWZ2zjPv8/WfOWdSAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuhfL02HRSKfHonRONNJFcU+6Ihal66JKt+5K/Xf9Wv2/
        +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
        l/x8AAAAAJBa6y7fNtC/sCiU3rX0LxhtrbtsfX4uAAAAAHjL8Jrzzm5uvvYfRbn0Dqe5ce6rrSfP/Wh+
        HgAAAABoa3jNxXcMPnvzUF40TXTqX0IcXn3BLfnnAwAAAMCYDK+7dEX9QPW8eBpvms9c+8/W2kvvzz8P
        AAAAALrSemLWx1prL/t+c9PcVwe23bozL6TeLoPPzx8Z2nj1H4fXfOZ78cQnp+fzAQAAAGBCDa889xOt
        1RffVT/4fWj97F81N875c3PzvH/XGdp49Z+a62f/srXu8q071lz0tbr8yq8HAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA69D/Cba+g3dcyuQAAAABJ
        RU5ErkJggg==
</value>
  </data>
</root>